import requests
import openai
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import os

# Variables d'environnement (d√©finies par le serveur)
OS_NEWSAPI_KEY = os.environ.get("NEWSAPI_KEY")
OS_OPENAI_KEY = os.environ.get("OPENAI_KEY")
OS_GMAIL_USER = os.environ.get("GMAIL_USER")
OS_GMAIL_PASSWORD = os.environ.get("GMAIL_PASSWORD")

# V√©rification des variables d'environnement
def check_environment():
    required_vars = ["NEWSAPI_KEY", "OPENAI_KEY", "GMAIL_USER", "GMAIL_PASSWORD"]
    missing_vars = []
    
    for var in required_vars:
        if not os.environ.get(var):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Variables d'environnement manquantes : {', '.join(missing_vars)}")
        return False
    
    print("‚úÖ Toutes les variables d'environnement sont configur√©es")
    return True

# 1. R√©cup√©rer les articles d'actualit√© sur l'IA (version fran√ßaise)
def fetch_ai_articles_fr(api_key, page_size=12):
    url = "https://newsapi.org/v2/everything"
    
    # Requ√™te plus pr√©cise pour l'IA avec des termes sp√©cifiques
    query = """("intelligence artificielle" OR "IA" OR "AI" OR "machine learning" OR "apprentissage automatique" OR "deep learning" OR "apprentissage profond" OR "GPT" OR "ChatGPT" OR "OpenAI" OR "Google AI" OR "Meta AI" OR "Microsoft AI" OR "robots" OR "automatisation" OR "algorithmes" OR "neural networks" OR "r√©seaux neuronaux") AND NOT ("incendie" OR "feu" OR "catastrophe naturelle" OR "m√©t√©o" OR "climat" OR "environnement" OR "pollution")"""
    
    params = {
        "q": query,
        "language": "fr",
        "pageSize": page_size,
        "sortBy": "publishedAt",  # Articles les plus r√©cents
        "apiKey": api_key
    }
    response = requests.get(url, params=params)
    articles = response.json().get("articles", [])
    
    # Ajouter la langue √† chaque article
    for article in articles:
        article['language'] = 'fr'
    
    return articles

# 2. R√©sumer un article en fran√ßais (version am√©lior√©e)
def summarize_text_fr(text, openai_api_key, title="", url=""):
    # V√©rifier si le texte est valide
    if not text or text.strip() == "" or len(text.strip()) < 10:
        return "Contenu de l'article non disponible"
    
    client = openai.OpenAI(api_key=openai_api_key)
    
    # Prompt en fran√ßais pour les articles fran√ßais
    prompt = f"""R√©sume cet article en 2-3 phrases maximum. 
    
Titre de l'article : {title}
URL : {url}

Contenu √† r√©sumer :
{text}

R√©sum√© :"""
    
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=150,
            temperature=0.3,  # R√©duire la temp√©rature pour plus de coh√©rence
        )
        
        # V√©rifier que la r√©ponse n'est pas None avant d'appeler strip()
        if response.choices[0].message.content is not None:
            return response.choices[0].message.content.strip()
        else:
            return "R√©sum√© non disponible"
    except Exception as e:
        print(f"Erreur lors du r√©sum√© : {e}")
        return "Erreur lors de la g√©n√©ration du r√©sum√©"

# Nouvelle fonction pour valider la pertinence IA d'un article
def validate_ai_relevance(article, openai_api_key):
    """V√©rifie si un article traite bien de l'intelligence artificielle"""
    title = article.get('title', '')
    description = article.get('description', '')
    content = article.get('content', '')
    
    # Combiner le titre et la description pour l'analyse
    text_to_analyze = f"{title} {description}"
    
    client = openai.OpenAI(api_key=openai_api_key)
    
    prompt = f"""Analyse ce texte et d√©termine s'il traite de l'intelligence artificielle (IA), du machine learning, des robots, de l'automatisation, ou de technologies li√©es √† l'IA.

Texte √† analyser : "{text_to_analyze}"

R√©ponds uniquement par "OUI" si l'article traite de l'IA ou de technologies li√©es, ou "NON" sinon."""

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=10,
            temperature=0.1,
        )
        
        result = (response.choices[0].message.content or "").strip().upper()
        return result == "OUI"
    except Exception as e:
        print(f"Erreur lors de la validation IA : {e}")
        # En cas d'erreur, on accepte l'article par d√©faut
        return True

# 3. V√©rifier la qualit√© technique d'un article
def validate_article_quality(article):
    """V√©rifie si un article a un contenu valide techniquement"""
    title = str(article.get('title') or '')
    description = str(article.get('description') or '')
    content = str(article.get('content') or '')
    url = str(article.get('url') or '')
    
    # Nettoyer les cha√Ænes
    title = title.strip()
    description = description.strip()
    content = content.strip()
    url = url.strip()
    
    # V√©rifier que l'article a au moins un titre et une URL
    if not title or not url:
        return False
    
    # V√©rifier qu'il y a du contenu √† r√©sumer
    if not description and not content:
        return False
    
    return True

# 3.5. Supprimer les articles en double
def remove_duplicate_articles(articles):
    """Supprime les articles en double bas√©s sur l'URL et le titre"""
    seen_urls = set()
    seen_titles = set()
    unique_articles = []
    
    for article in articles:
        url = article.get('url', '').strip()
        title = article.get('title', '').strip()
        
        # Normaliser le titre pour la comparaison (supprimer les espaces multiples, etc.)
        normalized_title = ' '.join(title.lower().split())
        
        # V√©rifier si l'URL ou le titre normalis√© a d√©j√† √©t√© vu
        if url not in seen_urls and normalized_title not in seen_titles:
            seen_urls.add(url)
            seen_titles.add(normalized_title)
            unique_articles.append(article)
        else:
            print(f"üîÑ Article en double supprim√© : {title[:50]}...")
    
    print(f"‚úÖ {len(articles) - len(unique_articles)} articles en double supprim√©s")
    return unique_articles

# 4. G√©n√©rer le contenu de l'e-mail (version fran√ßaise)
def create_email_content_fr(articles, summaries):
    content = "<h2>Actualit√©s IA - Articles en fran√ßais</h2><ul>"
    for article, summary in zip(articles, summaries):
        content += f"<li><a href='{article['url']}'>{article['title']}</a><br>{summary}</li><br>"
    content += "</ul>"
    return content

# 5. Envoyer l'e-mail
# Modifi√© pour accepter une liste de destinataires
def send_email(subject, html_content, sender, recipients, smtp_server, smtp_port, smtp_user, smtp_password):
    msg = MIMEMultipart()
    msg['From'] = sender
    # Si recipients est une liste, joindre avec des virgules
    print("Destinataires :", recipients)
    if isinstance(recipients, list):
        msg['To'] = ', '.join(recipients)
    else:
        msg['To'] = recipients
    msg['Subject'] = subject
    msg.attach(MIMEText(html_content, 'html'))
    with smtplib.SMTP_SSL(smtp_server, smtp_port) as server:
        server.login(smtp_user, smtp_password)
        server.sendmail(sender, recipients, msg.as_string())

# 6. Orchestration (version fran√ßaise)
def main():
    print("üöÄ D√©marrage du script de newsletter IA fran√ßaise...")
    
    # V√©rifier l'environnement
    if not check_environment():
        return
    
    NEWSAPI_KEY = OS_NEWSAPI_KEY
    OPENAI_KEY = OS_OPENAI_KEY
    SMTP_SERVER = "smtp.gmail.com"
    SMTP_PORT = 465
    SMTP_USER = OS_GMAIL_USER
    SMTP_PASSWORD = OS_GMAIL_PASSWORD
    SENDER = SMTP_USER
    RECIPIENTS = os.environ.get("RECIPIENTS", "")
    RECIPIENTS = [email.strip() for email in RECIPIENTS.split(",") if email.strip()]

    try:
        # R√©cup√©rer les articles en fran√ßais
        print("üì∞ R√©cup√©ration des articles fran√ßais...")
        articles = fetch_ai_articles_fr(NEWSAPI_KEY)
        print(f"‚úÖ R√©cup√©r√© {len(articles)} articles fran√ßais")
        
        # Supprimer les articles en double
        print("üîÑ Suppression des articles en double...")
        unique_articles = remove_duplicate_articles(articles)
        print(f"‚úÖ {len(unique_articles)} articles uniques apr√®s suppression des doublons")
        
        # Filtrer d'abord par qualit√© technique, puis par pertinence IA
        quality_articles = [article for article in unique_articles if validate_article_quality(article)]
        print(f"‚úÖ {len(quality_articles)} articles de qualit√© technique apr√®s premier filtrage")
        
        # Ensuite filtrer par pertinence IA
        valid_articles = []
        for article in quality_articles:
            print(f"üîç Validation IA pour : {article['title'][:50]}...")
            if validate_ai_relevance(article, OPENAI_KEY):
                valid_articles.append(article)
                print(f"   ‚úÖ Article valid√© comme pertinent")
            else:
                print(f"   ‚ùå Article rejet√© (non pertinent)")
        
        print(f"‚úÖ {len(valid_articles)} articles pertinents apr√®s validation IA")
        
        if not valid_articles:
            print("‚ùå Aucun article valide trouv√©")
            return
        
        summaries = []
        for i, article in enumerate(valid_articles):
            print(f"üìù R√©sum√© de l'article {i+1}/{len(valid_articles)}...")
            print(f"   Titre: {article['title']}")
            
            # Utiliser description ou content, selon ce qui est disponible
            content = article.get('description', '') or article.get('content', '')
            summary = summarize_text_fr(content, OPENAI_KEY, article['title'], article['url'])
            summaries.append(summary)
            print(f"   R√©sum√©: {summary[:100]}...")
        
        email_content = create_email_content_fr(valid_articles, summaries)
        print("üìß Contenu de l'email g√©n√©r√©")
        
        # Envoyer l'email
        send_email("Veille IA quotidienne - Fran√ßais", email_content, SENDER, RECIPIENTS, SMTP_SERVER, SMTP_PORT, SMTP_USER, SMTP_PASSWORD)
        print("‚úÖ Email envoy√© avec succ√®s !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution : {e}")
        raise

if __name__ == "__main__":
    main() 